<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docs on PRC2</title><link>https://fontysvenlo.github.io/prc2/docs/</link><description>Recent content in Docs on PRC2</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 18 May 2022 10:31:29 +0200</lastBuildDate><atom:link href="https://fontysvenlo.github.io/prc2/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>01 Unit Testing Basics</title><link>https://fontysvenlo.github.io/prc2/docs/unit-testing-basics/</link><pubDate>Tue, 01 Feb 2022 11:32:04 +0100</pubDate><guid>https://fontysvenlo.github.io/prc2/docs/unit-testing-basics/</guid><description>Table of ContentsWrite your own tests!Testing / Test Driven DevelopmentWhat are tests and why do we need them?Test Driven Development (TDD)Arrange Act AssertClues neededAssertJ examples.Simple TestsString ContainmentCollection ContainmentAssert ExceptionsSoft AssertionsAssumptionsAdditional pointersWrite your own tests!Throughout the exercises of PRC1, you have become acquainted with the value of tests: You have a way of checking if your code is any good without having to test each and every part manually. You clicked on the nice TMC button in NetBeans and then you could see which parts of your code worked, and which didn’t.</description></item><item><title>02 Parameterized tests</title><link>https://fontysvenlo.github.io/prc2/docs/parameterized-tests/</link><pubDate>Tue, 01 Feb 2022 14:17:33 +0100</pubDate><guid>https://fontysvenlo.github.io/prc2/docs/parameterized-tests/</guid><description>Table of ContentsParameterized testsParameterized test, Junit 5 styleLookup in a map.Test data from a fileRepeated use of same data.Test Recipe I, Test Equals and hashCodeLinksParameterized testsYou will often see that test methods look a lot like each other. As an example: In the fraction exercise, in most test methods you have two inputs and one or two results, then an operation is done followed by some assertion, often of the same kind.</description></item><item><title>03 Design for testability</title><link>https://fontysvenlo.github.io/prc2/docs/design-for-testability/</link><pubDate>Wed, 02 Feb 2022 11:28:06 +0100</pubDate><guid>https://fontysvenlo.github.io/prc2/docs/design-for-testability/</guid><description>Table of ContentsFaking as a testing techniqueStay cool, have a Mockito.To Mock or To ConfigureDesign for Test-abilityBusiness class fit for testingFaking as a testing technique&amp;#34;When you can’t or won’t make it, Fake it&amp;#34;
Let’s revisit the movie making metaphor. We know that almost everything in that industry is fake, or maybe more politely make-belief. In that it only needs to look convincing without being the real thing. So for instance, when someone needs to be hit hard in the face, it will not really be done and to make sure nothing untoward happens to the expensive actors, they may be replaced by stunt men and women, so the punch will never land on the pretty face.</description></item><item><title>04 Generics</title><link>https://fontysvenlo.github.io/prc2/docs/generics/</link><pubDate>Wed, 09 Mar 2022 13:53:06 +0100</pubDate><guid>https://fontysvenlo.github.io/prc2/docs/generics/</guid><description>Table of ContentsGenericsGenerics, the fine printCheating the compilerWildcard and boundsLower bound or Contra variantSelf use in Generic definitionsTesting genericsReadingGenericsGenerics is mainly a compiler feature. In java (at least the versions up to this moment, March 2022) it is even more so, because after the compiler had it’s go with it, it largely discards the generic information, and the runtime, the JVM, does not really care about generics and does not use it.</description></item><item><title>05 JPMS, Lambda and Streams</title><link>https://fontysvenlo.github.io/prc2/docs/jpms-lambda-streams/</link><pubDate>Wed, 16 Mar 2022 13:53:06 +0100</pubDate><guid>https://fontysvenlo.github.io/prc2/docs/jpms-lambda-streams/</guid><description>Table of ContentsJava Platform Module SystemChanges in visibilityJava Modules and TestingBlack box vs White BoxStandard Source code organization.Lambda and StreamsFunctional Interface Rationale&amp;lt;S.H.A.P.E.&amp;gt; of java.util.functionsWhere is toString?Method ReferencesStreams, SQL like operations expressed in Java 8SQL like functionsCollection Enhancements and general tipsImproved Map in Java 8Optional demystifiedReadingJPMSLambda and streamsJava Platform Module SystemThe Java Platform Module System has been introduced with Java 9 and had a long development history at the point of introduction.</description></item><item><title>06 Database Access JDBC</title><link>https://fontysvenlo.github.io/prc2/docs/database-access/</link><pubDate>Wed, 23 Mar 2022 13:53:06 +0100</pubDate><guid>https://fontysvenlo.github.io/prc2/docs/database-access/</guid><description>Table of ContentsJava DataBase ConnectivityDataBase connection credentials and Java PropertiesUsing a Data sourceResultSetAnatomy of a prepared statementTraditional preparing statementsDatabase Meta InformationCheck constraintsTransactionsUsing Stored ProceduresDAO’sJava DataBase ConnectivityDataBase connection credentials and Java PropertiesSome things do NOT belong in source code. In particular do not put credentials of any kind inside files that are committed to a version control system, such as source code. Make sure you configure your version control system such that such files are excluded from commits.</description></item><item><title>07 JavaFX</title><link>https://fontysvenlo.github.io/prc2/docs/javafx/</link><pubDate>Wed, 30 Mar 2022 13:53:06 +0100</pubDate><guid>https://fontysvenlo.github.io/prc2/docs/javafx/</guid><description>Table of ContentsJava FX BindingsBinding APIsUnbinding DoubleBinding dependenciesCaching bindingsUsing SceneBuilderDefining Widgets using FXMLReadingMore LinksJava FX BindingsThe graphic style of JavaFX is already quite nice. The architecture of JavaFX applied the lessons learned from the earlier Java framework AWT and Swing.
Tip: Swing and AWT are the Java GUI frameworks with which NetBeans IDE and Intelij is built. That proves that these framworks are still in use in the industry. There is another Java GUI framework word mentioning, which is SWT, developed by IBM under the Eclipse flag.</description></item><item><title>08 The State of Things</title><link>https://fontysvenlo.github.io/prc2/docs/statemachine/</link><pubDate>Thu, 14 Apr 2022 12:02:24 +0200</pubDate><guid>https://fontysvenlo.github.io/prc2/docs/statemachine/</guid><description>Table of ContentsThe state of thingsImplementing behavior using state machines.State machines and regular expressionsRegular expressionsBasic regex syntax and rulesGroupingThe state of things Implementing behavior using state machines.Systems sometimes have to exhibit some kind of behavior that is different observable output over time. This is different from a pure function, which will always produce the same output for the same input. The behavior differs depending on the &amp;#39;history&amp;#39; the system experienced, typically in the form of &amp;#39;events&amp;#39; or method calls that happened over time.</description></item><item><title>09 Reflection</title><link>https://fontysvenlo.github.io/prc2/docs/reflection/</link><pubDate>Wed, 11 May 2022 12:02:24 +0200</pubDate><guid>https://fontysvenlo.github.io/prc2/docs/reflection/</guid><description>Table of ContentsReflectionNoteReflectionReflection enables a developer to write programs that manipulate Java code dynamically. It is an API that enables you to inspect types (classes, interfaces), fields, constructors, methods, packages, annotations etc. during runtime.
Reclection or class introspection is used to leverage the infomation that is avialable in classes. Using the information that is available about a class and by implication about the instances of the class can help to avoid copy-and-waste programming.</description></item><item><title>10 I18N, exceptions and logging</title><link>https://fontysvenlo.github.io/prc2/docs/internationalisation/</link><pubDate>Wed, 18 May 2022 10:31:29 +0200</pubDate><guid>https://fontysvenlo.github.io/prc2/docs/internationalisation/</guid><description>Table of ContentsInternationalisation (I18N)The Date and Time APINumber FormatsTesting Localized ExceptionsAdditional PointersExceptions SummaryException-HandlingException typesChecked Exceptions vs. Unchecked ExceptionsMore on exception handling and finally clauseCustom Exception classesTry with resources.Choose: at least one of catch or finally blockChaining of exceptionsLoggingReplace soutv by using a log macroConfigure loggingInternationalisation (I18N)The Date and Time APIIn Java, an Instant represents a point on the time line. The origin (called epoch) is arbitrarily set at midnight of the first of January 1970 Greenwich time (UTC).</description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docs on PRC2</title><link>https://fontysvenlo.github.io/prc2/docs/</link><description>Recent content in Docs on PRC2</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 09 Mar 2022 13:53:06 +0100</lastBuildDate><atom:link href="https://fontysvenlo.github.io/prc2/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Unit Testing Basics</title><link>https://fontysvenlo.github.io/prc2/docs/unit-testing-basics/</link><pubDate>Tue, 01 Feb 2022 11:32:04 +0100</pubDate><guid>https://fontysvenlo.github.io/prc2/docs/unit-testing-basics/</guid><description>Table of ContentsWrite your own tests!Testing / Test Driven DevelopmentWhat are tests and why do we need them?Test Driven Development (TDD)Arrange Act AssertClues neededAssertJ examples.Simple TestsString ContainmentCollection ContainmentAssert ExceptionsSoft AssertionsAssumptionsAdditional pointersWrite your own tests!Throughout the exercises of PRC1, you have become acquainted with the value of tests: You have a way of checking if your code is any good without having to test each and every part manually. You clicked on the nice TMC button in NetBeans and then you could see which parts of your code worked, and which didn’t.</description></item><item><title>Parameterized tests</title><link>https://fontysvenlo.github.io/prc2/docs/parameterized-tests/</link><pubDate>Tue, 01 Feb 2022 14:17:33 +0100</pubDate><guid>https://fontysvenlo.github.io/prc2/docs/parameterized-tests/</guid><description>Table of ContentsParameterized testsParameterized test, Junit 5 styleLookup in a map.Test data from a fileRepeated use of same data.Test Recipe I, Test Equals and hashCodeLinksParameterized testsYou will often see that test methods look a lot like each other. As an example: In the fraction exercise, in most test methods you have two inputs and one or two results, then an operation is done followed by some assertion, often of the same kind.</description></item><item><title>Generics</title><link>https://fontysvenlo.github.io/prc2/docs/generics/</link><pubDate>Wed, 09 Mar 2022 13:53:06 +0100</pubDate><guid>https://fontysvenlo.github.io/prc2/docs/generics/</guid><description>Table of ContentsGenericsGenerics, the fine printCheating the compilerWildcard and boundsLower bound or Contra variantSelf use in Generic definitionsTesting genericsGenericsGenerics is mainly a compiler feature. In java (at least the versions up to this moment, March 2022) it is even more so, because after the compiler had it’s go with it, it largely discards the generic information, and the runtime, the JVM, does not really care about generics and does not use it.</description></item><item><title>Desgin for testability</title><link>https://fontysvenlo.github.io/prc2/docs/design-for-testability/</link><pubDate>Wed, 02 Feb 2022 11:28:06 +0100</pubDate><guid>https://fontysvenlo.github.io/prc2/docs/design-for-testability/</guid><description>Table of ContentsFaking as a testing techniqueStay cool, have a Mockito.To Mock or To ConfigureDesign for Test-abilityBusiness class fit for testingFaking as a testing technique&amp;#34;When you can’t or won’t make it, Fake it&amp;#34;
Let’s revisit the movie making metaphor. We know that almost everything in that industry is fake, or maybe more politely make-belief. In that it only needs to look convincing without being the real thing. So for instance, when someone needs to be hit hard in the face, it will not really be done and to make sure nothing untoward happens to the expensive actors, they may be replaced by stunt men and women, so the punch will never land on the pretty face.</description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docs on PRC2</title><link>https://fontysvenlo.github.io/prc2/docs/</link><description>Recent content in Docs on PRC2</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 27 Mar 2025 13:53:06 +0100</lastBuildDate><atom:link href="https://fontysvenlo.github.io/prc2/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>01 Unit Testing Basics</title><link>https://fontysvenlo.github.io/prc2/docs/unit-testing-basics/</link><pubDate>Tue, 01 Feb 2022 11:32:04 +0100</pubDate><guid>https://fontysvenlo.github.io/prc2/docs/unit-testing-basics/</guid><description>Table of ContentsWrite your own tests!Testing / Test Driven DevelopmentWhat are tests and why do we need them?Test Driven Development (TDD)Arrange Act AssertClues neededAssertJ examples.Simple TestsString ContainmentCollection ContainmentAssert ExceptionsSoft AssertionsAssumptionsAdditional pointersClean testsParameterized testsParameterized test, Junit 5 styleLookup in a map.Test data from a fileRepeated use of same data.Test Recipe I, Test Equals and hashCodeLinksWrite your own tests!Throughout the exercises of PRC1, you have become acquainted with the value of tests: You have a way of checking if your code is any good without having to test each and every part manually.</description></item><item><title>02 REST API</title><link>https://fontysvenlo.github.io/prc2/docs/rest/</link><pubDate>Tue, 01 Feb 2022 14:17:33 +0100</pubDate><guid>https://fontysvenlo.github.io/prc2/docs/rest/</guid><description>Table of ContentsRESTProject 1HTTP basicsHTTP RequestHTTP responseRest basicsClient-Server ArchitectureStatelessnessCacheabilityLayered SystemCode on Demand (Optional)Uniform InterfaceUniform Interface in DepthIdentification of ResourcesManipulation of Resources through RepresentationsSelf-Descriptive MessagesHypermedia as the Engine of Application State (HATEOAS)HTTP methods in RESTRESTFor project 2 you have to build a REST (REpresisential State Transfer) Application Programmable Interface (API). Before we explain what a REST API is, we first explain what the problem was with the way of designing your API in project 1 and the very basics of HTTP.</description></item><item><title>03 Testability and mocking</title><link>https://fontysvenlo.github.io/prc2/docs/testability-and-mocking/</link><pubDate>Wed, 02 Feb 2022 11:28:06 +0100</pubDate><guid>https://fontysvenlo.github.io/prc2/docs/testability-and-mocking/</guid><description>Table of Contentsweek 3REST API end-to-end testingREST-assuredTest containersDesign and end-to-end testingTest-abilityWriting test-able codeBusiness class fit for testingFaking as a testing techniqueStay cool, have a Mockito.To Mock or To Configureweek 3We’ll cover the following topics this week:
Testing a REST applicationTestable DesignMocking and Stubbing REST API end-to-end testingLast week we discussed REST interfaces and up to now we have been unit testing and testing manually. Sometimes we want to test the whole system (end-to-end), to see if all different parts work together.</description></item><item><title>04 Database Access JDBC</title><link>https://fontysvenlo.github.io/prc2/docs/database-access/</link><pubDate>Thu, 13 Mar 2025 13:53:06 +0100</pubDate><guid>https://fontysvenlo.github.io/prc2/docs/database-access/</guid><description>Table of ContentsJava DataBase ConnectivityDataBase connection credentials and Java PropertiesUsing a Data sourceResultSetAnatomy of a prepared statementDatabase Meta InformationCheck constraintsTransactionsUsing Stored ProceduresJava DataBase ConnectivityDataBase connection credentials and Java PropertiesSome things do NOT belong in source code. In particular do not put credentials of any kind inside files that are committed to a version control system, such as source code. Make sure you configure your version control system such that such files are excluded from commits.</description></item><item><title>05 JPMS, Lambda and Streams</title><link>https://fontysvenlo.github.io/prc2/docs/jpms-lambda-streams/</link><pubDate>Thu, 20 Mar 2025 13:53:06 +0100</pubDate><guid>https://fontysvenlo.github.io/prc2/docs/jpms-lambda-streams/</guid><description>Table of ContentsJava Platform Module SystemChanges in visibilityJava Modules and TestingBlack box vs White BoxStandard Source code organization.Lambda and StreamsFunctional Interface Rationale&amp;lt;S.H.A.P.E.&amp;gt; of java.util.functionsWhere is toString?Method ReferencesStreams, SQL like operations expressed in Java 8SQL like functionsCollection Enhancements and general tipsImproved Map in Java 8Optional demystifiedReadingJPMSLambda and streamsJava Platform Module SystemThe Java Platform Module System has been introduced with Java 9 and had a long development history at the point of introduction.</description></item><item><title>06 Generics</title><link>https://fontysvenlo.github.io/prc2/docs/generics/</link><pubDate>Thu, 27 Mar 2025 13:53:06 +0100</pubDate><guid>https://fontysvenlo.github.io/prc2/docs/generics/</guid><description>Table of ContentsGenericsGenerics, the fine printCheating the compilerWildcard and boundsLower bound or Contra variantSelf use in Generic definitionsDynamic type informationisAssignableFrom. Will a cast work?Testing genericsReadingGenericsGenerics is mainly a compiler feature. In java (at least the versions up to this moment, March 2022) it is even more so, because after the compiler had it’s go with it, it largely discards the generic information, and the runtime, the JVM, does not really care about generics and does not use it.</description></item></channel></rss>
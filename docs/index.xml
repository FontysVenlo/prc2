<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docs on PRC2</title><link>https://fontysvenlo.github.io/prc2_web/docs/</link><description>Recent content in Docs on PRC2</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 01 Feb 2022 14:17:33 +0100</lastBuildDate><atom:link href="https://fontysvenlo.github.io/prc2_web/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Unit Testing Basics</title><link>https://fontysvenlo.github.io/prc2_web/docs/unit-testing-basics/</link><pubDate>Tue, 01 Feb 2022 11:32:04 +0100</pubDate><guid>https://fontysvenlo.github.io/prc2_web/docs/unit-testing-basics/</guid><description>Write your own tests! Throughout the exercises of PRC1, you have become acquainted with the value of tests: You have a way of checking if your code is any good without having to test each and every part manually. You clicked on the nice TMC button in NetBeans and then you could see which parts of your code worked, and which didn’t. There is a catch though: Out there in the real world, there won’t be any NetBeans button doing that magic for you, nor will some teacher or school provide the tests for you, so you will be on your own.</description></item><item><title>Parameterized tests</title><link>https://fontysvenlo.github.io/prc2_web/docs/parameterized-tests/</link><pubDate>Tue, 01 Feb 2022 14:17:33 +0100</pubDate><guid>https://fontysvenlo.github.io/prc2_web/docs/parameterized-tests/</guid><description>Parameterized tests You will often see that test methods look a lot like each other. As an example: In the fraction exercise, in most test methods you have two inputs and one or two results, then an operation is done followed by some assertion, often of the same kind. This quickly leads to the habit of copy and waste programming. Many errors are introduced this way: You copy the original, tweak the copy a bit and you are done.</description></item><item><title/><link>https://fontysvenlo.github.io/prc2_web/docs/topics/arrangeactassert/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fontysvenlo.github.io/prc2_web/docs/topics/arrangeactassert/</guid><description>Arrange Act Assert Some action. When designing tests it is good to keep the ideas of making action movies in the back of your head. Looking at some the making of…​ can be quite instructive in this case. For a scene to be taken, there is typically quite some preparation involved like hanging Spiderman on a thin cable from the ceiling, making sure the crook is in the right position so he can land or receive the first punches and so on.</description></item><item><title/><link>https://fontysvenlo.github.io/prc2_web/docs/topics/assertjexamples/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fontysvenlo.github.io/prc2_web/docs/topics/assertjexamples/</guid><description>AssertJ examples. In our course we to stick to AssertJ library where possible.
The rationale for that is:
The AssertJ assertion API is very powerful and can easily turn overly strict or brittle tests into more effective tests. You have come across tests in the mooc that insisted on specific formatting. With AssertJ you can specify elements you want to see and do not want to see.</description></item><item><title/><link>https://fontysvenlo.github.io/prc2_web/docs/topics/assumptions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fontysvenlo.github.io/prc2_web/docs/topics/assumptions/</guid><description>Assumptions There are test cases that are only useful under certain conditions:
The test is only meaningful on a specific Operating System.
The test needs a database connection and only executes when available.
A file must be present.
A &amp;#39;slow&amp;#39; test flag is set in some file, which only executes the test when that flag is set. Used to avoid slow tests in the normal write-compile-test cycle.</description></item><item><title/><link>https://fontysvenlo.github.io/prc2_web/docs/topics/configuringmaven/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fontysvenlo.github.io/prc2_web/docs/topics/configuringmaven/</guid><description>Configuring Maven Maven and maven projects are first class citizens in the NetBeans world.
Since we build with maven, we are not really bound to particular IDE, other than for editing and maybe the odd debug session.[1]. This means that you can use other IDE’s, but expect no help from the teachers.
We have many things to share with you, and we use maven for that.
We share libraries and project configuration files (pom.</description></item><item><title/><link>https://fontysvenlo.github.io/prc2_web/docs/topics/flexjava/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fontysvenlo.github.io/prc2_web/docs/topics/flexjava/</guid><description>Flex Your Java Muscles No, it is not about heavy lifting. It is about reconfiguring your Java environment easily. It also assumes that you are in the habit of using the command line over the GUI.
Sure, a GUI is &amp;#39;user friendly&amp;#39; if you are willing to look for the things your want to use, and know where you need to look for it. But what about the computer listening to you for a change, instead of you having to scroll through its wealth of options and other stuff you may have installed.</description></item><item><title/><link>https://fontysvenlo.github.io/prc2_web/docs/topics/gettingstarted/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fontysvenlo.github.io/prc2_web/docs/topics/gettingstarted/</guid><description>Getting Started To work successfully with the programs needed for PRC2, you need to install them first. Properly installing Java and other programs is not hard but must be done precisely. What will follow is a description on how to do that under Ubuntu Linux, macOS and Windows. You can adapt this configuration for other operating systems too, possibly with a few tweaks.
It is best to get fairly familiar with the command line pretty soon, because in the end it will make you much more effective.</description></item><item><title/><link>https://fontysvenlo.github.io/prc2_web/docs/topics/javastyle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fontysvenlo.github.io/prc2_web/docs/topics/javastyle/</guid><description>Java Style Java is a language (sort of anyway) and languages come with a culture. One such cultural aspect is the way you format your code, like placing your brackets, parenthesis, spaces and curly braces. This coding style is intended to help you read the code, recognize the structure at a glance and find the interesting details easily and spot on.
The official Java style is derived from the Kernighan and Ritchie (K&amp;amp;R) style for the C programming language.</description></item><item><title/><link>https://fontysvenlo.github.io/prc2_web/docs/topics/mavenmodules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fontysvenlo.github.io/prc2_web/docs/topics/mavenmodules/</guid><description>Maven Modules Many projects will have more than just one component (jar or war file). Think of the parallel project project 2.
It is a good idea to reflect this design in the way your structure you source code: Use multiple modules.
Module A module is just a maven project. Has a pom.xml which defines the relation with other modules.
Figure 1. Modules and parent. As you see in the figure, the parent lists its children.</description></item><item><title/><link>https://fontysvenlo.github.io/prc2_web/docs/topics/mavenonsteroids/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fontysvenlo.github.io/prc2_web/docs/topics/mavenonsteroids/</guid><description>Maven on Steroids or: use it properly Sometimes you think, maven is not your thing because it is slowing you down, certainly if you are trying to work your way through your code TDD style: Write test, run test red, implement code, run test green, be happy.
But reconsider: Maven takes it’s job very serious, but since it is a computer program it is stubbornly stupid, so it might be that you are using it in the wrong way.</description></item><item><title/><link>https://fontysvenlo.github.io/prc2_web/docs/topics/mavensettingsandrepo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fontysvenlo.github.io/prc2_web/docs/topics/mavensettingsandrepo/</guid><description>Maven From week two onwards we will use Maven as the preferred build tool. The link in the previous sentence points to the very readable complete reference manual, which also has some pointers for beginners, might you categorize yourselves as one.
Maven Repositories A maven repository is a server that provides ready built maven &amp;#39;artifacts&amp;#39;, such as (binary) jar files containing libraries, frameworks or APIs and in many (but not all) companion jar files containing the javadoc (often) and sources of the same binary.</description></item><item><title/><link>https://fontysvenlo.github.io/prc2_web/docs/topics/netbeansproductivity/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fontysvenlo.github.io/prc2_web/docs/topics/netbeansproductivity/</guid><description>Adding your own code templates to NetBeans IDE Productivity can be helped big time, if you add code templates to NetBeans. Quite a few are predefined but you can add your own too.
Go to Tools &amp;gt; Options &amp;gt; Editor &amp;gt; Code Templates.
You get this dialog:
You can add one with the new button, Duh.
I find this one quite convenient:
Definition of my codetemplate jutm //@Disabled(&amp;#34;think TDD&amp;#34;) @${baseType type=&amp;#34;org.</description></item><item><title/><link>https://fontysvenlo.github.io/prc2_web/docs/topics/parameterizedtests/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fontysvenlo.github.io/prc2_web/docs/topics/parameterizedtests/</guid><description>Parameterized tests You will often see that test methods look a lot like each other. As an example: In the fraction exercise, in most test methods you have two inputs and one or two results, then an operation is done followed by some assertion, often of the same kind. This quickly leads to the habit of copy and waste programming. Many errors are introduced this way: You copy the original, tweak the copy a bit and you are done.</description></item><item><title/><link>https://fontysvenlo.github.io/prc2_web/docs/topics/sebipom/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fontysvenlo.github.io/prc2_web/docs/topics/sebipom/</guid><description>Sebipom 3.0.3 Spelled all lower case: sebipom, is a super pom to use in Fontys Venlo projects. It keeps your own pom.xml file simple and focused to declare just the dependencies needed. Niceties to do proper Test Driver Development are provided for in the sebipom definitions, including things as being able to create javadoc in a professional looking way, including code highlighted code snippets, checkstyle, reporting, code coverage with maven, pmd, spotbugs etc.</description></item><item><title/><link>https://fontysvenlo.github.io/prc2_web/docs/topics/softassertions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fontysvenlo.github.io/prc2_web/docs/topics/softassertions/</guid><description>Soft Assertions Sometimes you have a pressing need to assert more than one thing in a test method, because two or more values always come in pairs and setting stuff up and dividing it over multiple methods would make the test less readable, which is bad.
However, having multiple asserts in one method is bad style, because the first problem that occurs is the only failure that will be reported by the test.</description></item><item><title/><link>https://fontysvenlo.github.io/prc2_web/docs/topics/tdd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fontysvenlo.github.io/prc2_web/docs/topics/tdd/</guid><description>What are tests and why do we need them? The way that you have worked with Java so far is that you had to write some code to implement something. For example you had to implement a bird watcher system or a telephone book, in which you could save people with their telephone numbers and look them up, too. You probably created classes called PhoneBook or BookEntry, and you had variables such as String personName, int phoneNumber and maybe a List or a Map which contained all the people and their phone numbers.</description></item><item><title/><link>https://fontysvenlo.github.io/prc2_web/docs/topics/testrecipes1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fontysvenlo.github.io/prc2_web/docs/topics/testrecipes1/</guid><description>Test Recipe I, Test Equals and hashCode We may sprinkle our testing stuff with a few recipes for often occurring tests. This is the the first installment.
Equals and hashCode are not twins in the direct sense, but indeed methods whose implementation should have a very direct connection. From the java Object API follows that:
Two objects that are equal by their equal method, than their hashCode should also be equal.</description></item></channel></rss>
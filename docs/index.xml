<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docs on PRC2</title><link>https://fontysvenlo.github.io/prc2/docs/</link><description>Recent content in Docs on PRC2</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 02 Feb 2022 11:28:06 +0100</lastBuildDate><atom:link href="https://fontysvenlo.github.io/prc2/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>01 Unit Testing Basics</title><link>https://fontysvenlo.github.io/prc2/docs/unit-testing-basics/</link><pubDate>Tue, 01 Feb 2022 11:32:04 +0100</pubDate><guid>https://fontysvenlo.github.io/prc2/docs/unit-testing-basics/</guid><description>Table of ContentsWrite your own tests!Testing / Test Driven DevelopmentWhat are tests and why do we need them?Test Driven Development (TDD)Arrange Act AssertClues neededAssertJ examples.Simple TestsString ContainmentCollection ContainmentAssert ExceptionsSoft AssertionsAssumptionsAdditional pointersClean testsParameterized testsParameterized test, Junit 5 styleLookup in a map.Test data from a fileRepeated use of same data.Test Recipe I, Test Equals and hashCodeLinksWrite your own tests!Throughout the exercises of PRC1, you have become acquainted with the value of tests: You have a way of checking if your code is any good without having to test each and every part manually.</description></item><item><title>02 REST API</title><link>https://fontysvenlo.github.io/prc2/docs/rest/</link><pubDate>Tue, 01 Feb 2022 14:17:33 +0100</pubDate><guid>https://fontysvenlo.github.io/prc2/docs/rest/</guid><description>Table of ContentsRESTProject 1HTTP basicsHTTP RequestHTTP responseRest basicsClient-Server ArchitectureStatelessnessCacheabilityLayered SystemCode on Demand (Optional)Uniform InterfaceUniform Interface in DepthIdentification of ResourcesManipulation of Resources through RepresentationsSelf-Descriptive MessagesHypermedia as the Engine of Application State (HATEOAS)HTTP methods in RESTRESTFor project 2 you have to build a REST (REpresisential State Transfer) Application Programmable Interface (API). Before we explain what a REST API is, we first explain what the problem was with the way of designing your API in project 1 and the very basics of HTTP.</description></item><item><title>03 Testability and mocking</title><link>https://fontysvenlo.github.io/prc2/docs/testability-and-mocking/</link><pubDate>Wed, 02 Feb 2022 11:28:06 +0100</pubDate><guid>https://fontysvenlo.github.io/prc2/docs/testability-and-mocking/</guid><description>Table of Contentsweek 3REST API end-to-end testingREST-assuredTest containersDesign and end-to-end testingTest-abilityWriting test-able codeBusiness class fit for testingFaking as a testing techniqueStay cool, have a Mockito.To Mock or To Configureweek 3Weâ€™ll cover the following topics this week:
Testing a REST applicationTestable DesignMocking and Stubbing REST API end-to-end testingLast week we discussed REST interfaces and up to now we have been unit testing and testing manually. Sometimes we want to test the whole system (end-to-end), to see if all different parts work together.</description></item></channel></rss>
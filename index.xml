<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Welcome on PRC2</title><link>https://fontysvenlo.github.io/prc2/</link><description>Recent content in Welcome on PRC2</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 02 Feb 2022 15:04:33 +0100</lastBuildDate><atom:link href="https://fontysvenlo.github.io/prc2/index.xml" rel="self" type="application/rss+xml"/><item><title>Tips</title><link>https://fontysvenlo.github.io/prc2/pages/tips/</link><pubDate>Wed, 02 Feb 2022 10:43:27 +0100</pubDate><guid>https://fontysvenlo.github.io/prc2/pages/tips/</guid><description>Table of ContentsJava StyleWhere have you put your Curly Braces.Javadoc styleAdding your own code templates to NetBeans IDEMavenMaven RepositoriesInformatics pomMaven on Steroids or: use it properlyMaven ModulesManaging different Java versionsJava StyleJava is a language and languages come with a culture. One such cultural aspect is the way you format your code, like placing your brackets, parenthesis, spaces and curly braces. This coding style is intended to help you read the code, recognize the structure at a glance and find the interesting details easily and spot on.</description></item><item><title>01 Unit Testing Basics</title><link>https://fontysvenlo.github.io/prc2/docs/unit-testing-basics/</link><pubDate>Tue, 01 Feb 2022 11:32:04 +0100</pubDate><guid>https://fontysvenlo.github.io/prc2/docs/unit-testing-basics/</guid><description>Table of ContentsWrite your own tests!Testing / Test Driven DevelopmentWhat are tests and why do we need them?Test Driven Development (TDD)Arrange Act AssertClues neededAssertJ examples.Simple TestsString ContainmentCollection ContainmentAssert ExceptionsSoft AssertionsAssumptionsAdditional pointersClean testsParameterized testsParameterized test, Junit 5 styleLookup in a map.Test data from a fileRepeated use of same data.Test Recipe I, Test Equals and hashCodeLinksWrite your own tests!Throughout the exercises of PRC1, you have become acquainted with the value of tests: You have a way of checking if your code is any good without having to test each and every part manually.</description></item><item><title>Setup</title><link>https://fontysvenlo.github.io/prc2/pages/setup/</link><pubDate>Tue, 01 Feb 2022 14:30:36 +0100</pubDate><guid>https://fontysvenlo.github.io/prc2/pages/setup/</guid><description>Table of ContentsGetting StartedSetting up the correct environmentInstall JavaMake Java available on the PATHInstall Apache MavenInstall or update your IDEAdditional PointersGetting StartedTo work successfully with the programs needed for PRC2, you need to install them first. Properly installing Java and other programs is not hard but must be done precisely. What will follow is a description on how to do that under Ubuntu Linux, macOS and Windows. You can adapt this configuration for other operating systems too, possibly with a few tweaks.</description></item><item><title>02 Parameterized tests</title><link>https://fontysvenlo.github.io/prc2/docs/parameterized-tests/</link><pubDate>Tue, 01 Feb 2022 14:17:33 +0100</pubDate><guid>https://fontysvenlo.github.io/prc2/docs/parameterized-tests/</guid><description>Table of ContentsRESTProject 1HTTP basicsHTTP RequestHTTP responseRest basicsClient-Server ArchitectureStatelessnessCacheabilityLayered SystemCode on Demand (Optional)Uniform InterfaceUniform Interface in DepthIdentification of ResourcesManipulation of Resources through RepresentationsSelf-Descriptive MessagesHypermedia as the Engine of Application State (HATEOAS)HTTP methods in RESTRESTFor project 2 you have to build a REST (REpresisential State Transfer) Application Programmable Interface (API). Before we explain what a REST API is, we first explain what the problem was with the way of designing your API in project 1 and the very basics of HTTP.</description></item></channel></rss>